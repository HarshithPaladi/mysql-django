version: '3.9'
# Declare the services here that compose your app.
services:
  # Define the individual services in your app.
  # Names of services are used to build network names and service names.
  # The name of the service is also used as the host & container name.
  # For DNS resolution, the name of the service is used as the domain name.
  mysql_host:
    image: mysql
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=admin
      - MYSQL_DATABASE=mysql_db
    healthcheck:
        test: "mysqladmin ping --silent" # check if mysqld is alive
        # test: "mysqladmin ping -u root -p$$MYSQL_ROOT_PASSWORD"
        interval: 1s # Starts checking after 1 second
        timeout: 1s # If a check takes longer than timeout, it is considered a failure
        retries: 3 # Number of retries before marking the service as unhealthy
        start_period: 1s # Time to wait before starting the first healthcheck, 
        # to allow the container to start, if check passes in this time, container is marked healthy
    volumes:
      - mysql_data:/var/lib/mysql:rw

  django:
    image: ghcr.io/harshithpaladi/mysql-django:latest
    # image: mysql-django:6
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    #   cache_from:
    #     - ghcr.io/harshithpaladi/mysql-django
    #     - type=registry,ref=ghcr.io/harshithpaladi/mysql-django
    #     - mysql-django
    restart: always
    ports:
      - "8888:8000" # host:container
    depends_on:
        mysql_host:
          condition: service_healthy # if the service is healthy, then only start this service
    command: sh -c "python3 manage.py makemigrations App1 && python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8000"
volumes:
  mysql_data: # Declaraing a volume